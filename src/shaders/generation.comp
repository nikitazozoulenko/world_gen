#version 430
layout(local_size_x=1, local_size_y=1, local_size_z=1) in;
layout(rgba32f, binding = 0) uniform image2D img_output;

uniform float game_time;
uniform vec3 cam_pos;

#define PI 3.14159265359
#define N_OCTAVES 3


uint wang_hash(uint seed)
{
    seed = (seed ^ 61) ^ (seed >> 16);
    seed *= 9;
    seed = seed ^ (seed >> 4);
    seed *= 0x27d4eb2d;
    seed = seed ^ (seed >> 15);
    return seed;
}


uint randUIntAccumulate(inout uint rand_state)
{   // wang_hash uint32_t
    // Uniform [0, MAX_UINT32_T]
    uint seed = int(rand_state);
    rand_state += 1;
    return wang_hash(seed);
}


uint ivec2ToUIntPRNG(ivec2 v)
{
    uint x = uint(v.x);
    uint y = uint(v.y);
    return wang_hash(wang_hash(x)+y);
}


uint ivec3ToUIntPRNG(ivec3 v)
{
    uint x = uint(v.x);
    uint y = uint(v.y);
    uint z = uint(v.z);
    return wang_hash(wang_hash(wang_hash(x)+y)+z);
}


float randFloatAccumulate(inout uint rand_state)
{   // wang_hash uint32_t
    // Uniform in range [0.0, 1.0]
    double n = randUIntAccumulate(rand_state);
    uint MAX = -1;
    return float(n/MAX);
}


vec3 rotate(vec3 v, vec3 axis, float rad) 
{   //Quaternion rotation
    float hr = rad / 2.0;
    float s = sin(hr);
    vec4 q = vec4(axis * s, cos(hr));
    vec3 q2 = q.xyz + q.xyz;
    vec3 qq2 = q.xyz * q2;
    vec2 qx = q.xx * q2.yz;
    float qy = q.y * q2.z;
    vec3 qw = q.w * q2.xyz;
    mat3 matRot = mat3(
        1.0 - (qq2.y + qq2.z),  qx.x - qw.z,            qx.y + qw.y,
        qx.x + qw.z,            1.0 - (qq2.x + qq2.z),  qy - qw.x,
        qx.y - qw.y,            qy + qw.x,              1.0 - (qq2.x + qq2.y)
    );
    return matRot * v;
}


float simplexNoise2D(float x, float y, float amplitude) //"world" x and y, can be scaled
{
    float noise = 0.0;

    //scewed coordinates 
    float NNN = 2.0f;
    float F = (sqrt(NNN+1)-1)/NNN;
    float G = (1-1/sqrt(NNN+1))/NNN;
    float x_scew = x + (x+y)*F;
    float y_scew = y + (x+y)*F;

    //which hypercube coordinates 
    float x_b = floor(x_scew);
    float y_b = floor(y_scew);

    //internal coordinates
    float x_i = x_scew-x_b;
    float y_i = y_scew-y_b;

    //order for edge traversal
    const int N_CORNERS = 3;
    ivec2 corners[N_CORNERS];
    corners[0] = ivec2(x_b, y_b);
    corners[1];
    corners[2] = corners[0] + ivec2(1,1);
    if(x_i > y_i)
        corners[1] = corners[0] + ivec2(1, 0);
    else
        corners[1] = corners[0] + ivec2(0, 1);

    //traverse every edge
    for(int i=0; i<N_CORNERS; i++)
    {
        ivec2 vert = corners[i];
        float factor = (vert.x+vert.y)*G;
        float x_n = x-(vert.x - factor);
        float y_n = y-(vert.y - factor);

        float M = max(0, 0.5 - x_n*x_n - y_n*y_n);
        uint PRNG = ivec2ToUIntPRNG(vert);
        float f0 = randFloatAccumulate(PRNG)*2-1;
        float f1 = randFloatAccumulate(PRNG)*2-1;
        noise += M*M*M*M * dot(vec2(f0, f1), vec2(x_n, y_n));
    }

    //scale to [0, amplitude]
    return (70.0 * noise +1.0)/2.0 * amplitude;
}


float simplexNoise3D(float x, float y, float z, float amplitude) //"world" x, y and z, can be scaled
{
    float noise = 0.0f;

    //scewed coordinates 
    float NNN = 3.0f;
    float F = (sqrt(NNN+1)-1)/NNN;
    float G = (1-1/sqrt(NNN+1))/NNN;
    float x_scew = x + (x+y+z)*F;
    float y_scew = y + (x+y+z)*F;
    float z_scew = z + (x+y+z)*F;

    //which hypercube coordinates 
    float x_b = floor(x_scew);
    float y_b = floor(y_scew);
    float z_b = floor(z_scew);

    //internal coordinates
    float x_i = x_scew-x_b;
    float y_i = y_scew-y_b;
    float z_i = z_scew-z_b;

    //order for edge traversal
    const int N_CORNERS = 4;
    ivec3 corners[N_CORNERS];
    corners[0] = ivec3(x_b, y_b, z_b);
    corners[1];
    corners[2];
    corners[3] = corners[0] + ivec3(1, 1, 1);
    if(x_i > y_i && x_i > z_i)
    {
        corners[1] = corners[0] + ivec3(1, 0, 0);
        if(y_i > z_i)
            corners[2] = corners[0] + ivec3(1, 1, 0);
        else
            corners[2] = corners[0] + ivec3(1, 0, 1);
    }
    else if(y_i > x_i && y_i > z_i)
    {
        corners[1] = corners[0] + ivec3(0, 1, 0);
        if(x_i > z_i)
            corners[2] = corners[0] + ivec3(1, 1, 0);
        else
            corners[2] = corners[0] + ivec3(0, 1, 1);
    }
    else if(z_i > x_i && z_i > y_i)
    {
        corners[1] = corners[0] + ivec3(0, 0, 1);
        if(x_i > y_i)
            corners[2] = corners[0] + ivec3(1, 0, 1);
        else
            corners[2] = corners[0] + ivec3(0, 1, 1);
    }

    //traverse every edge
    for(int i=0; i<N_CORNERS; i++)
    {
        ivec3 vert = corners[i];
        float factor = (vert.x+vert.y+vert.z)*G;
        float x_n = x-(vert.x - factor);
        float y_n = y-(vert.y - factor);
        float z_n = z-(vert.z - factor);

        float M = max(0, 0.5 - x_n*x_n - y_n*y_n - z_n*z_n);
        uint PRNG = ivec3ToUIntPRNG(vert);
        float f0 = randFloatAccumulate(PRNG)*2-1;
        float f1 = randFloatAccumulate(PRNG)*2-1;
        float f2 = randFloatAccumulate(PRNG)*2-1;
        noise += M*M*M*M * dot(vec3(f0, f1, f2), vec3(x_n, y_n, z_n));
    }

    //scale to [0, amplitude]
    return (32.0f * noise +1.0f)/2.0f * amplitude;
}



float simplexOctaves2D(float world_x, float world_z, float sizes[N_OCTAVES], float amplitudes[N_OCTAVES])
{
    float noise = 0.0f;
    for (int i=0; i<N_OCTAVES; i++)
    {
        float size = sizes[i];
        float amplitude = amplitudes[i];
        noise += simplexNoise2D(world_x/size, world_z/size, amplitude);
    }
    // No bounds checking
    return noise;
}


float simplexOctaves3D(float world_x, float world_y, float world_z, float sizes[N_OCTAVES], float amplitudes[N_OCTAVES])
{
    float noise = 0.0f;
    for (int i=0; i<N_OCTAVES; i++)
    {
        float size = sizes[i];
        float amplitude = amplitudes[i];
        noise += simplexNoise3D(world_x/size, world_y/size, world_z/size, amplitude);
    }
    // No bounds checking
    return noise;
}


void main()
{   
    int x = int(gl_GlobalInvocationID.x);
    int y = int(gl_GlobalInvocationID.y);

    float sizes[N_OCTAVES];
    float amplitudes[N_OCTAVES];
    sizes[0] = 32.0;
    sizes[1] = 64.0;
    sizes[2] = 128.0;
    amplitudes[0] = 0.15;
    amplitudes[1] = 0.35;
    amplitudes[2] = 0.5;
    float noise = simplexOctaves3D(x+cam_pos.z, y+cam_pos.x, 30*game_time, sizes, amplitudes);

    //Store sample
    imageStore(img_output, ivec2(x,y), vec4(noise, noise, noise, 1));
}