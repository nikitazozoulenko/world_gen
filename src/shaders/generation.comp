#version 430
layout(local_size_x=1, local_size_y=1, local_size_z=1) in;
layout(rgba32f, binding = 0) uniform image2D img_output;

uniform float game_time;

#define PI 3.14159265359

uint randUInt(inout uint rand_state)
{   // wang_hash uint32_t
    // Uniform [0, MAX_UINT32_T]
    uint seed = int(rand_state);
    rand_state += 1;

    seed = (seed ^ 61) ^ (seed >> 16);
    seed *= 9;
    seed = seed ^ (seed >> 4);
    seed *= 0x27d4eb2d;
    seed = seed ^ (seed >> 15);
    return seed;
}


float randFloat(inout uint rand_state)
{   // wang_hash uint32_t
    // Uniform in range [0.0, 1.0]
    double n = randUInt(rand_state);
    uint MAX = -1;
    return float(n/MAX);
}


vec3 rotate(vec3 v, vec3 axis, float rad) 
{   //Quaternion rotation
    float hr = rad / 2.0;
    float s = sin(hr);
    vec4 q = vec4(axis * s, cos(hr));
    vec3 q2 = q.xyz + q.xyz;
    vec3 qq2 = q.xyz * q2;
    vec2 qx = q.xx * q2.yz;
    float qy = q.y * q2.z;
    vec3 qw = q.w * q2.xyz;
    mat3 matRot = mat3(
        1.0 - (qq2.y + qq2.z),  qx.x - qw.z,            qx.y + qw.y,
        qx.x + qw.z,            1.0 - (qq2.x + qq2.z),  qy - qw.x,
        qx.y - qw.y,            qy + qw.x,              1.0 - (qq2.x + qq2.y)
    );
    return matRot * v;
}



void main()
{   
    ivec2 pixel_coords = ivec2(gl_GlobalInvocationID.xy);
    uint rand_state = int(pixel_coords.x + 800*pixel_coords.y +int(game_time*800*800));

    float color = 255;
    //Store sample
    imageStore(img_output, pixel_coords, vec4(1,1,1,1));
}